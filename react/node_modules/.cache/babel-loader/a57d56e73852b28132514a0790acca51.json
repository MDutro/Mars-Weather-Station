{"ast":null,"code":"var _jsxFileName = \"/home/mdutro/Documents/Mars-Weather-Station/react/src/MarsWeather.js\";\nimport React from \"react\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport WeatherCards from './WeatherCards';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport convert from './convert';\nexport class MarsWeather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weather: null\n    };\n\n    this.onClick = () => {\n      this.setState({\n        weather: this.state.weather.map(weatherDay => {\n          const newMn = convert(weatherDay.AT.mn, weatherDay.AT.isFarenheit);\n          weatherDay.AT.mn = newMn;\n          const newMx = convert(weatherDay.AT.mx, weatherDay.AT.isFarenheit);\n          weatherDay.AT.mx = newMx; // Toggle C and F to trigger the correct calculation in convert()\n\n          weatherDay.AT.isFarenheit = weatherDay.AT.isFarenheit === 'C' ? 'F' : 'C';\n          return weatherDay;\n        })\n      });\n    };\n  }\n\n  // Get weather data from NASA API\n  componentDidMount() {\n    fetch(\"http://localhost:8080\").then(res => res.json()).then(data => {\n      console.log(data); // Take the day number key and add it to the AT object as a value so it can be passed as a prop to WeatherCards.js\n\n      const weather = data.sol_keys.map(key => {\n        data[key].AT.dayNumber = key * 1; // Add a key: value pair to toggle between Celsius and Farenheit\n\n        data[key].AT.isFarenheit = 'C';\n        return data[key];\n      });\n      this.setState({\n        weather\n      });\n    }).catch(console.log);\n  } // This function converts temps to C or F depending on the state of isFarenheit\n  // convert = (temp, isFarenheit) => {\n  //   if(isFarenheit === 'C') {\n  //     return (temp * (9/5)) + 32\n  //   } else if (isFarenheit === 'F') {\n  //     return (temp - 32) * (5/9)\n  //   }\n  // }   \n  // Use convert() to calculate C or F for min and max temps for each Martian day\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Martian Weather Station\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Weather Data from Elysium Planitia\"))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"justify-content-start\",\n      style: {\n        overflow: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.weather && this.state.weather.map((val, index) => React.createElement(Col, {\n      sm: \"auto\",\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(WeatherCards // Props sent to WeatherCards.js\n    , {\n      sol: val.AT.dayNumber,\n      date: new Date(val.First_UTC).toDateString(),\n      min: Math.round(val.AT.mn),\n      max: Math.round(val.AT.mx),\n      deg: val.AT.isFarenheit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      onClick: this.onClick,\n      style: {\n        marginTop: '0.5rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Convert Temps\")));\n  }\n\n}","map":{"version":3,"sources":["/home/mdutro/Documents/Mars-Weather-Station/react/src/MarsWeather.js"],"names":["React","Jumbotron","Container","WeatherCards","Col","Row","Button","convert","MarsWeather","Component","state","weather","onClick","setState","map","weatherDay","newMn","AT","mn","isFarenheit","newMx","mx","componentDidMount","fetch","then","res","json","data","console","log","sol_keys","key","dayNumber","catch","render","overflow","val","index","Date","First_UTC","toDateString","Math","round","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport WeatherCards from './WeatherCards';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport convert from './convert';\n\nexport class MarsWeather extends React.Component {\n  state =  {weather : null};\n\n// Get weather data from NASA API\n  componentDidMount() {\n    fetch(\"http://localhost:8080\")\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      // Take the day number key and add it to the AT object as a value so it can be passed as a prop to WeatherCards.js\n      const weather = data.sol_keys.map(key => {\n        data[key].AT.dayNumber = key*1;\n        // Add a key: value pair to toggle between Celsius and Farenheit\n        data[key].AT.isFarenheit = 'C';\n        return data[key];\n      });\n      this.setState({ weather });\n    })\n    .catch(console.log);  \n  }\n\n  // This function converts temps to C or F depending on the state of isFarenheit\n  // convert = (temp, isFarenheit) => {\n  //   if(isFarenheit === 'C') {\n  //     return (temp * (9/5)) + 32\n  //   } else if (isFarenheit === 'F') {\n  //     return (temp - 32) * (5/9)\n  //   }\n  // }   \n\n  // Use convert() to calculate C or F for min and max temps for each Martian day\n  onClick = () => {\n    this.setState({weather: this.state.weather.map(weatherDay => {\n      const newMn = convert(weatherDay.AT.mn, weatherDay.AT.isFarenheit);\n      weatherDay.AT.mn = newMn;\n      const newMx = convert(weatherDay.AT.mx, weatherDay.AT.isFarenheit);\n      weatherDay.AT.mx = newMx;\n      // Toggle C and F to trigger the correct calculation in convert()\n      weatherDay.AT.isFarenheit =  (weatherDay.AT.isFarenheit ==='C') ? 'F' : 'C';\n      return weatherDay;\n    })\n    });\n  };\n\n  render() {\n    return (\n     <div>\n       <Container>\n         {/* bg-transparent */}\n        <Jumbotron className=\"\">\n        <h1>Martian Weather Station</h1>\n          <p>\n            Weather Data from Elysium Planitia\n          </p>\n        </Jumbotron>\n      </Container>\n      <Container>\n        <Row className=\"justify-content-start\" style={{overflow: 'hidden'}}>\n        {/* Only render the weather cards if the fetch API call has completed */}\n          {this.state.weather && this.state.weather.map((val, index) => (\n            <Col sm=\"auto\" key={index}>\n              <WeatherCards\n              // Props sent to WeatherCards.js\n              sol={val.AT.dayNumber}\n              date={new Date(val.First_UTC).toDateString()}\n              min={Math.round(val.AT.mn)}\n              max={Math.round(val.AT.mx)}\n              deg={val.AT.isFarenheit}\n              />\n            </Col>))\n          }\n        </Row>\n        <Button onClick={this.onClick} style={{ marginTop: '0.5rem'}}>Convert Temps</Button>\n      </Container>\n     </div>   \n    );\n  }    \n}\n\n"]},"metadata":{},"sourceType":"module"}